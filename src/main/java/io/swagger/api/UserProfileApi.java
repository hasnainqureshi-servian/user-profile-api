/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.UserProfile;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-09T04:26:08.933Z")

@Api(value = "user_profile", description = "the user_profile API")
public interface UserProfileApi {

    @ApiOperation(value = "Add a new user profile ", nickname = "addUserProfile", notes = "", authorizations = {
        @Authorization(value = "user_profile_auth", scopes = {
            @AuthorizationScope(scope = "write:user_profile", description = "modify user profile in your account"),
            @AuthorizationScope(scope = "read:user_profile", description = "read your user profile")
            })
    }, tags={ "user profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/user_profile",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addUserProfile(@ApiParam(value = "user profile object that needs to be added to the store" ,required=true )  @Valid @RequestBody UserProfile body);


    @ApiOperation(value = "Deletes a profile", nickname = "deleteUserProfile", notes = "", authorizations = {
        @Authorization(value = "user_profile_auth", scopes = {
            @AuthorizationScope(scope = "write:user_profile", description = "modify user profile in your account"),
            @AuthorizationScope(scope = "read:user_profile", description = "read your user profile")
            })
    }, tags={ "user profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "user profile not found") })
    @RequestMapping(value = "/user_profile/{userProfileId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUserProfile(@ApiParam(value = "User profile id to delete",required=true) @PathVariable("userProfileId") Long userProfileId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey);


    @ApiOperation(value = "Find user profile by ID", nickname = "getUserProfileById", notes = "Returns a single user profile", response = UserProfile.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "user profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UserProfile.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "user_profile not found") })
    @RequestMapping(value = "/user_profile/{userProfileId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserProfile> getUserProfileById(@ApiParam(value = "ID of profile to return",required=true) @PathVariable("userProfileId") Long userProfileId);


    @ApiOperation(value = "Update an existing user profile", nickname = "updateUserProfile", notes = "", authorizations = {
        @Authorization(value = "user_profile_auth", scopes = {
            @AuthorizationScope(scope = "write:user_profile", description = "modify user profile in your account"),
            @AuthorizationScope(scope = "read:user_profile", description = "read your user profile")
            })
    }, tags={ "user profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "user profile not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/user_profile",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUserProfile(@ApiParam(value = "user profile object that needs to be uploaded" ,required=true )  @Valid @RequestBody UserProfile body);


    @ApiOperation(value = "Updates a user profile in the store with form data", nickname = "updateUserProfileWithForm", notes = "", authorizations = {
        @Authorization(value = "user_profile_auth", scopes = {
            @AuthorizationScope(scope = "write:user_profile", description = "modify user profile in your account"),
            @AuthorizationScope(scope = "read:user_profile", description = "read your user profile")
            })
    }, tags={ "user profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/user_profile/{userProfileId}",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<Void> updateUserProfileWithForm(@ApiParam(value = "ID of user profile that needs to be updated",required=true) @PathVariable("userProfileId") Long userProfileId,@ApiParam(value = "Updated name of the user profile") @RequestParam(value="name", required=false)  String name,@ApiParam(value = "Updated status of the user profile") @RequestParam(value="status", required=false)  String status);

}
